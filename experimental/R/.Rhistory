scanText(a)
scanText('a b')
scanText('a  b')
scanText('a\tb')
scanText('a            b')
scanText('a            b=lj')
scanText('aljk            b=lj')
scanText('a  b,m')
?strsplit
strsplit(a, '&')
strsplit(scanText(a), '&')
strsplit(scanText(a)[-1], '&')
scanText(a)[-1]
qs = scanText(a)[-1]
qs
strsplit(qs, '&')
m = strsplit(qs, '&')
size(m)
dim(m)
m
m[1]
m[2]
m[1,1]
m[1a]
a
m = strsplit(qs, '&')
m
unlist(m)
m = unlist(m)
strsplit(m, '=')
capture.output
a
scanText(a)
scanText(a)[2]
Sys.getenv()
Sys.getenv
?Sys.getenv
?list
a = list(asfd='df')
a
a = list('asfd'='df')
a
a[1]
a = list('asfd'='df', 'ew'='xcv')
a
a[2]
a['ew']
a = "jsonp=handleR&width=10&height=1623"
b = splitstr(a, '&')
b = strsplit(a, '&')
b
b[1]
b[1][1]
b[1][1][asdf]
b[1][1][3]
b[1][1][1]
b[1][1][2]
b[1]
?unlist
b = unlist(a)
c = strsplit(b)
c = strsplit(b, '=')
c
b
a
b = strsplit(a, '&')
b
unlist(b)
b = unlist(b)
b
c = strsplit(b, '=')
c
c[2]
c[2][1]
c[2,1]
c[2]
b
c
c[[1]]
c[1][1]
c[][1]
c[1:3][1]
c[1:3]
c[1:3][:3]
c[1:3][1:3]
c[1][1:3]
c[1:3][1]
c[1:3][1:2]
c[1:3][[1]]
c[1:3]
?rapply
lapply(c, mean)
lapply(c, cat)
?function
afsd
 af w()
keyw = function(l) list(l[1] = l[2])
keyw = function(l) {list(l[1] = l[2])}
keyw = function(l) {1}
keyw = function(l) {list(l[1])}
keyw = function(l) {list(l[1] = l[2])}
keyw = function(l) {list('asfd' = l[2])}
?list
l = list('key'='value')
l
l = c('key','value')
l
list(l[1]=l[2])
alist(l[1]=l[2])
c
array
array(c)
array(c)[1]
array(c)[2]
array(c)[2][2]
array(c)[2][1]
array(c)[2]
?names
l
l = list('value')
l
name(l)
names(l)
names(l) = 'key'
l
keyw = function(l) {nl=list(l[2]); names(nl) = l[1]}
l
l = list('hey', 'vvv')
keyw(l)
keyw = function(l) {nl=list(l[2]); names(nl) = l[1]; nl}
keyw(l)
l
l = list('hey', 'vvv')
;[2]
l[2]
keyw = function(l) {nl=list(l[[2]]); names(nl) = l[[1]]; nl}
keyw(l)
keyw = function(l) {#
    nl = list(l[[2]])#
    names(nl) = l[[1]] #
    nl#
}
keyw(l)
l = c(1,2)
l[[1]]
l[1]
l[[[1]]]
l[[1]]
keyw(l)
l
c
c[1]
keyw(c[1])
keyw(c[[1]])
c[[1]]
keyw(c[[1]])
?lapply
lapply(c, keyw)
unlist(lapply(c, keyw))
d = unlist(lapply(c, keyw))
class(d)
d[1]
d$jsonp
d['jsonp']
?character
names(d)
pairToKV = function(l) {#
    nl = character(l[[2]])#
    names(nl) = l[[1]] #
    nl#
}
pairToKV(c[[1]])
pairToKV(c[1])
c
c[[1]]
character(c[[1]])
character(c[[1]][q])
character(c[[1]][1])
c[[1]][1]
as.character(c[[1]][1])
as.character(c[[1]])
as.character(c[[1]][1])
?unlist
?CGIwithR
formData
?formData
formula
Sys.getenv("R_GSCMD")
dev2bitmap
system('hs')
system('gs')
history()
Cairo()
library(Cairo)
Cairo()
plot(1:10, 1:10)
?Cairo()
CairoX11()
plot(1:10, 1:10)
CairoPNG()
CairoPNG('test.png')
getwd()
plot(1:10, 1:10)
vignette
vignette(Cairo)
example
example(Cairo)
?Cario
?Cairo
library(Cairo)
?Cairo
?dev
?dev.off
    if (is.na(gene_name)) {#
        gene_name = '%'    #
    }#
    library(RMySQL)#
    conn = dbConnect(MySQL(), host="localhost", user="gregdingle", password="", dbname="genetify")#
    # dbListTables(conn) #
    # TODO: guard against sql injection#
    sql = paste(#
        'select * from variant_reward where domain_name = ', domain, #
        ' and page_name = ', page, #
        ' and gene_name like ', gene_name, #
        ' order by gene_name, variant_name', sep='"'#
    )#
    fr = dbGetQuery(conn, sql)#
    dbDisconnect(conn)#
    fr
setwd('/Users/greg/Sites/genetify/R')
#
# TODO: why doesn't Sys.getenv in function body ?#
main = function(qs=Sys.getenv('QUERY_STRING')) { #
#
    if (qs != '') {#
        options(error = function(){ cat(geterrmessage()); })#
        params = parseqs(qs)   #
    }#
    else {#
        # options(error = recover)#
        params = c(#
            domain='localhost.com', #
            page='/genetify/test.php', #
            width=5, #
            jsonp='handleGraphs')#
    } #
    #
    requiredParams = c('domain', 'page', 'width', 'jsonp')#
    t = mapply(assert, !is.na(params[requiredParams]), paste(requiredParams, 'is required'))#
          #
#
    if (exists('fr')) remove(fr)#
    fr = getRewards(params['domain'], params['page'], params['gene_name'])#
    attach(fr)         #
      #
    # TODO: handling of invalid plotting#
    # if (length(fr) == 0) {#
    #     filenames = c(#
    #             'boxplot'=FALSE, #
    #             'stripchart'=FALSE#
    #     )    #
    #     printJSON(filenames, params['jsonp'])#
    #     q()#
    # }#
    #
#
    if (is.na(params['height'])) {#
        params['height'] = length(unique(gene_variant)) + 1#
    }#
    filenames = writeGraph(reward ~ gene_variant, as.numeric(params['width']), as.numeric(params['height']))#
#
    printJSON(filenames, params['jsonp'])#
}    #
#
printJSON = function(var, jsonp='') { #
    library(rjson)#
    out = paste(jsonp, '(', toJSON(var), ')', sep='')#
    cat(out)#
}#
#
parseqs = function(raw){#
    library(CGIwithR, warn.conflicts=FALSE) #
    qs = scanText(raw)[1]#
    split = strsplit(unlist(strsplit(qs, '&')  ), '=')#
    parsed = unlist(lapply(split, function(l) {#
        nl = list(l[[2]])#
        names(nl) = l[[1]] #
        nl#
    }))#
    parsed#
}                       #
#
getRewards = function(domain='localhost.com', page='/genetify/test.php', gene_name='%') {#
    library(RMySQL)#
    conn = dbConnect(MySQL(), host="localhost", user="gregdingle", password="", dbname="genetify")#
    # dbListTables(conn) #
    # TODO: guard against sql injection#
    sql = paste(#
        'select * from variant_reward where domain_name = ', domain, #
        ' and page_name = ', page, #
        ' and gene_name like ', gene_name, #
        ' order by gene_name, variant_name', sep='"'#
    )#
    fr = dbGetQuery(conn, sql)#
    # TODO: reorder factors#
    dbDisconnect(conn)  #
       #
    fr#
}#
                          #
graph = function(path, width, height, gfunc) {     #
    # TODO: is it possible to change the Cairo context without re-intializing?#
    Cairo(width, height, file=path, units='in', dpi=72, type='png')#
    par(las=1, fig=c(0.33, 1, 0, 1))#
#
    gfunc()#
    axis(3) #draw axis above                  #
#
    file.remove(path)#
    dev.off() #writes file#
}#
#
writeGraph = function(form, width, height) { #
        #
    # TODO: does device matter here?#
    # quartz(width=width, height=height) #
    library(Cairo)#
    #
    basepath = paste(getwd(), '../graphs', sep='/')     #
    filenames = c(#
            'boxplot'='boxplot.png', #
            'stripchart'='stripchart.png'#
    )    #
    #
    path = paste(basepath, filenames['boxplot'], sep='/')#
    graph(path, width, height, function() { boxplot(#
        form, #
        horizontal=TRUE, #
        varwidth=TRUE)#
    })#
#
    path = paste(basepath, filenames['stripchart'], sep='/')#
    graph(path, width, height, function() { stripchart(#
        form, #
        pch=1, #
        method='jitter', #
        jitter=0.1) #
    })#
    #
    filenames#
#
    # TODO: reuse?#
    # library(lattice)                        #
    # bwplot(reward ~ variant_name | gene_name)#
#
}   #
#
assert = function(boolean, msg) {   #
    if (boolean == FALSE) {#
        cat(msg)#
        q()#
    }#
}     #
#
ftest = function(fr=getRewards(gene_name='mygene')){ #
#
    # TODO: figure out labels!!#
    # fr$gene_variant = factor(fr$gene_variant)#
    # levels(fr$gene_variant) = c(levels(fr$gene_variant)[4], levels(fr$gene_variant)[1:3])#
#
    #
    # mod = lm(scale(fr$reward, scale=FALSE) ~ FAC)#
    mod = lm(fr$reward ~ fr$gene_variant)#
    print(summary(mod))#
    mod#
}#
#
bootY = function(fr=getRewards(gene_name='mygene')){ #
    #
    mod = fr$reward ~ fr$gene_variant#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)#
    #
    bootlm = function(data, indices) { #
        y = fit + e[indices] #
    	mod = lm(y ~ X - 1)#
    	coefficients(mod)#
    }#
    #
}#
#
#
main()
ftest()
matrix(mod)
bootY()
setwd('/Users/greg/Sites/genetify/R')
#
# TODO: why doesn't Sys.getenv in function body ?#
main = function(qs=Sys.getenv('QUERY_STRING')) { #
#
    if (qs != '') {#
        options(error = function(){ cat(geterrmessage()); })#
        params = parseqs(qs)   #
    }#
    else {#
        # options(error = recover)#
        params = c(#
            domain='localhost.com', #
            page='/genetify/test.php', #
            width=5, #
            jsonp='handleGraphs')#
    } #
    #
    requiredParams = c('domain', 'page', 'width', 'jsonp')#
    t = mapply(assert, !is.na(params[requiredParams]), paste(requiredParams, 'is required'))#
          #
#
    if (exists('fr')) remove(fr)#
    fr = getRewards(params['domain'], params['page'], params['gene_name'])#
    attach(fr)         #
      #
    # TODO: handling of invalid plotting#
    # if (length(fr) == 0) {#
    #     filenames = c(#
    #             'boxplot'=FALSE, #
    #             'stripchart'=FALSE#
    #     )    #
    #     printJSON(filenames, params['jsonp'])#
    #     q()#
    # }#
    #
#
    if (is.na(params['height'])) {#
        params['height'] = length(unique(gene_variant)) + 1#
    }#
    filenames = writeGraph(reward ~ gene_variant, as.numeric(params['width']), as.numeric(params['height']))#
#
    printJSON(filenames, params['jsonp'])#
}    #
#
printJSON = function(var, jsonp='') { #
    library(rjson)#
    out = paste(jsonp, '(', toJSON(var), ')', sep='')#
    cat(out)#
}#
#
parseqs = function(raw){#
    library(CGIwithR, warn.conflicts=FALSE) #
    qs = scanText(raw)[1]#
    split = strsplit(unlist(strsplit(qs, '&')  ), '=')#
    parsed = unlist(lapply(split, function(l) {#
        nl = list(l[[2]])#
        names(nl) = l[[1]] #
        nl#
    }))#
    parsed#
}                       #
#
getRewards = function(domain='localhost.com', page='/genetify/test.php', gene_name='%') {#
    library(RMySQL)#
    conn = dbConnect(MySQL(), host="localhost", user="gregdingle", password="", dbname="genetify")#
    # dbListTables(conn) #
    # TODO: guard against sql injection#
    sql = paste(#
        'select * from variant_reward where domain_name = ', domain, #
        ' and page_name = ', page, #
        ' and gene_name like ', gene_name, #
        ' order by gene_name, variant_name', sep='"'#
    )#
    fr = dbGetQuery(conn, sql)#
    # TODO: reorder factors#
    dbDisconnect(conn)  #
       #
    fr#
}#
                          #
graph = function(path, width, height, gfunc) {     #
    # TODO: is it possible to change the Cairo context without re-intializing?#
    Cairo(width, height, file=path, units='in', dpi=72, type='png')#
    par(las=1, fig=c(0.33, 1, 0, 1))#
#
    gfunc()#
    axis(3) #draw axis above                  #
#
    file.remove(path)#
    dev.off() #writes file#
}#
#
writeGraph = function(form, width, height) { #
        #
    # TODO: does device matter here?#
    # quartz(width=width, height=height) #
    library(Cairo)#
    #
    basepath = paste(getwd(), '../graphs', sep='/')     #
    filenames = c(#
            'boxplot'='boxplot.png', #
            'stripchart'='stripchart.png'#
    )    #
    #
    path = paste(basepath, filenames['boxplot'], sep='/')#
    graph(path, width, height, function() { boxplot(#
        form, #
        horizontal=TRUE, #
        varwidth=TRUE)#
    })#
#
    path = paste(basepath, filenames['stripchart'], sep='/')#
    graph(path, width, height, function() { stripchart(#
        form, #
        pch=1, #
        method='jitter', #
        jitter=0.1) #
    })#
    #
    filenames#
#
    # TODO: reuse?#
    # library(lattice)                        #
    # bwplot(reward ~ variant_name | gene_name)#
#
}   #
#
assert = function(boolean, msg) {   #
    if (boolean == FALSE) {#
        cat(msg)#
        q()#
    }#
}     #
#
ftest = function(fr=getRewards(gene_name='mygene')){ #
#
    # TODO: figure out labels!!#
    # fr$gene_variant = factor(fr$gene_variant)#
    # levels(fr$gene_variant) = c(levels(fr$gene_variant)[4], levels(fr$gene_variant)[1:3])#
#
    #
    # mod = lm(scale(fr$reward, scale=FALSE) ~ FAC)#
    mod = lm(fr$reward ~ fr$gene_variant)#
    print(summary(mod))#
    mod#
}#
#
bootY = function(fr=getRewards(gene_name='mygene')){ #
    #
    mod = fr$reward ~ fr$gene_variant#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)#
    #
    bootlm = function(data, indices) { #
        y = fit + e[indices] #
    	mod = lm(y ~ X - 1)#
    	coefficients(mod)#
    } #
    #
    library(boot)#
    bootmod = boot(fr, bootlm, 1999)#
    print(summary(bootmod))#
    bootmod#
}#
#
#
main()
bootY()
fr=getRewards(gene_name='mygene')
mod = fr$reward ~ fr$gene_variant
mod
X = model.matrix(mod)
X
X - 1
fr$gene_variant
setwd('/Users/greg/Sites/genetify/R')
bootY = function(fr=getRewards(gene_name='mygene')){ #
    #
    mod = fr$reward ~ fr$gene_variant#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)#
    #
    bootlm = function(data, indices) { #
        y = fit + e[indices] #
        # mod = lm(y ~ X - 1)#
    	mod = lm(y ~ fr$gene_variant)#
    	coefficients(mod)#
    } #
    #
    library(boot)#
    bootmod = boot(fr, bootlm, 1999)#
    print(summary(bootmod))#
    bootmod#
}
bootY()
fr=getRewards(gene_name='mygene')
    mod = fr$reward ~ fr$gene_variant#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)
lm(y ~ fr$gene_variant)
lm(fit ~ fr$gene_variant)
fit
fit = fitted(mod)
fit
mod
?fitted
    mod = lm(fr$reward ~ fr$gene_variant)#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)
X
fit
lm(fit ~ fr$gene_variant)
lm(fr$reward ~ fr$gene_variant)
bootY()
bootY = function(fr=getRewards(gene_name='mygene')){ #
    #
    mod = lm(fr$reward ~ fr$gene_variant)#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)#
    #
    bootlm = function(data, indices) { #
        y = fit + e[indices] #
        # mod = lm(y ~ X - 1)#
    	mod = lm(y ~ fr$gene_variant)#
    	coefficients(mod)#
    } #
    #
    library(boot)#
    bootmod = boot(fr, bootlm, 1999)#
    print(summary(bootmod))#
    bootmod#
}
bootY()
warnings()
bootY = function(fr=getRewards(gene_name='mygene')){ #
    #
    fr$gene_variant = factor(fr$gene_variant)#
    mod = lm(fr$reward ~ fr$gene_variant)#
    fit = fitted(mod)#
    e = residuals(mod)#
    X = model.matrix(mod)#
    #
    bootlm = function(data, indices) { #
        y = fit + e[indices] #
        # mod = lm(y ~ X - 1)#
    	mod = lm(y ~ fr$gene_variant)#
    	coefficients(mod)#
    } #
    #
    library(boot)#
    bootmod = boot(fr, bootlm, 1999)#
    print(summary(bootmod))#
    bootmod#
}
warnings()
bootY()
bm = bootY()
bm
summary(bm)
bm
ftest()
